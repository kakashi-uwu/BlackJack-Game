import json
import random
import gettext

from aiogram import types
from dispatcher import dp
from dispatcher import bot
from bot import db

from game_controls import Game_controls, Keyboard

dealer_score = 0
global _

# settings command
@dp.message_handler(commands=['settings'])
async def settigns(message: types.Message):
    # get current user locale
    user = db.load_user(message.from_user.id)
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])

    # keyboard
    btn1 = types.InlineKeyboardButton(_('–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üëÖ'), callback_data="change_lang")
    btn2 = types.InlineKeyboardButton(_('–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª'), callback_data="contact_support")
    settings_markup = types.InlineKeyboardMarkup().add(btn1, btn2)

    await message.answer("<b>"+_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")+"</b>", reply_markup=settings_markup)

# stat command
@dp.message_handler(commands=['stat'])
async def statistics(message: types.Message):
    '''user statistics'''
    
    stat = db.load_statistics(message.from_user.id)
    percentage = [
        round(stat['games_won']/stat['games_played']*100, 2),
        round(stat['games_lost']/stat['games_played']*100, 2),
        round(stat['games_tied']/stat['games_played']*100, 2),
    ]

    locale = Game_controls()
    _ = locale.get_locale(stat['lang'])
    
    msg = "üìà <b>"+_("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")+"</b>" \
    +"\n\n<b>"+_("–ò–º—è")+f": {stat['user_name']}</b>\n" \
    +"üé≤ "+_("–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ")+f": <b>{stat['games_played']}</b>\n" \
    +"‚úÖ "+_("–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ")+f": <b>{stat['games_won']} ({percentage[0]}%)</b>\n" \
    +"‚ùå "+_("–ò–≥—Ä –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ")+f": <b>{stat['games_lost']} ({percentage[1]}%)</b>\n" \
    +"üòê "+_("–ò–≥—Ä –≤–Ω–∏—á—å—é")+f": <b>{stat['games_tied']} ({percentage[2]}%)</b>"

    await message.answer(msg)
    
# get help command
@dp.message_handler(commands=['help'])
async def info_help(message: types.Message):
    user = db.load_user(message.from_user.id)
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])
    await message.answer(_("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @bug_lag_feature"))

# get balance command
@dp.message_handler(commands=['balance'])
async def get_balance(message: types.Message):
    user = db.load_user(message.from_user.id)
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])

    await message.answer(_("üí∞ –ë–∞–ª–∞–Ω—Å: ")+ str(user['balance']))

# change lang command
@dp.message_handler(commands=['lang'])
async def change_lang(message: types.Message):
    user = db.load_user(message.from_user.id)

    # get current user locale
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])
    
    # keyboard
    russian_lang_btn = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='lang_russian')
    eng_lang_btn = types.InlineKeyboardButton('English üá∫üá∏', callback_data='lang_english')
    change_lang_markup = types.InlineKeyboardMarkup().add(russian_lang_btn, eng_lang_btn)

    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"), reply_markup=change_lang_markup)

# get rules command
@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
    user = db.load_user(message.from_user.id)
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])
    await message.answer(_("""‚ô¶Ô∏è <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ë–ª—ç–∫-–î–∂–µ–∫ (–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–æ)</b> ‚ô¶Ô∏è\n
–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–≥—Ä–∞–ª –≤ –±–ª—ç–∫–¥–∂–µ–∫.\n
–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞ ‚Äî 21.\n–ó–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç, —Ä–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫—É, —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è, –∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 21, –∏–≥—Ä–æ–∫ –≤—ã–ª–µ—Ç–∞–µ—Ç –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.\n
–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ 21, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —É –¥–∏–ª–µ—Ä–∞.\n–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ —Å—É–º–º–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–∞.\n
–°—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç:
- –í–∞–ª–µ—Ç - 2 –æ—á–∫–∞;\n- –î–∞–º–∞ - 3 –æ—á–∫–∞;\n- –ö–æ—Ä–æ–ª—å - 4 –æ—á–∫–∞;\n- –¢—É–∑ - 11 –æ—á–∫–æ–≤ (–µ—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 21, –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å 1 –æ—á–∫–æ);\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–º."""))

# start command 
@dp.message_handler(commands=['start'])
async def process_start_game(message: types.Message):
    '''bot start'''
    # register user if not exists
    user = db.load_user(message.from_user.id)

    if (not user):
        db.add_user(int(message.from_user.id), message.from_user.first_name, message.from_user.last_name)

    user = db.load_user(message.from_user.id)
    locale = Game_controls()
    _ = locale.get_locale(user['lang'])

    # keyboard
    kbd = Keyboard(user['lang'])
    main_menu_markup = kbd.new_game()

    db.update('user','is_game = ?','user_id = ?',(False,message.from_user.id,))
    await message.answer(_("‚ô¶Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–ª—ç–∫-–¥–∂–µ–∫ ‚ô¶Ô∏è"), reply_markup=main_menu_markup)

# main game logic
@dp.message_handler(content_types=["text"])
async def process_handler(message: types.Message):
    '''button handlers'''
    user = db.load_user(message.from_user.id)

    game_controls = Game_controls()
    _ = game_controls.get_locale(user['lang'])

    if message.text == _("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É üéÆ"):
        
        user = db.load_user(message.from_user.id)

        # updating deck of cards
        with open('static/deck_of_cards.json','r', encoding="utf-8") as input_f:
            deck = json.load(input_f)
        input_f.close()

        db.update(table='user', set='deck = ?', where='user_id = ?', values=(str(deck), message.from_user.id,))

        # update player score is he lost everything
        if user['balance'] < 1:
            user['balance'] = 100
            db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(100, True, message.from_user.id,))

        else: db.update(table='user', set='is_game = ?', where='user_id = ?', values=(True, message.from_user.id,))

        # keyboard
        kbd = Keyboard(user['lang'])
        game_type_markup = kbd.game_type()
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEEtKFie91Ts3FZ99cztCfWqfxAqNn4FgACaQIAArrAlQUw5zOp4KLsaCQE")
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã"), reply_markup=game_type_markup)

    if message.text == _("–ò–≥—Ä–∞—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º üß†"):
        user = db.load_user(message.from_user.id)
        if (user['is_game'] == False):
            await message.answer(_("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"))
            return;

        # keyboard
        kbd = Keyboard(user['lang'])
        choose_pet_markup = kbd.pet(user)
        await message.answer(_("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É"), reply_markup=choose_pet_markup)

    if ("ü™ô" in message.text or _("–í–∞-–±–∞–Ω–∫! ü§ë") in message.text):
        user = db.load_user(message.from_user.id)

        if (user['is_game'] == False):
            await message.answer(_("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"))
            return;

        '''Start game'''
        global dealer_score, player_score, player_cards, dealer_cards, pet
        # reset all our local variables
        deck         = []
        dealer_cards = []
        player_cards = []
        player_score = 0
        dealer_score = 0
        deck         = list(eval(user['deck']))

        # keyboard
        kbd = Keyboard(user['lang'])
        game_controls_markup = kbd.game_nav_1()
        
        if (_("–í–∞-–±–∞–Ω–∫! ü§ë") in message.text):
            pet = user['balance']
        else:
            pet = message.text.split()[0]

        db.update(table='user', set='pet = ?',where='user_id = ?', values=(pet, message.from_user.id,))
        user = db.load_user(message.from_user.id)

        if (int(pet) > int(user['balance'])):
            await message.answer(_("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."))
            return

        await message.answer(_("–°—Ç–∞–≤–∫–∞ –≤ {} –ø—Ä–∏–Ω—è—Ç–∞.ü§ë –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!").format(message.text))
        
        # Initial dealing. Two cards for both
        for i in range(2):
            # for player
            player_card = random.choice(deck)
            player_cards.append(player_card)
            deck.remove(player_card)
            player_score += player_card.get('cost')

            # for dealer
            dealer_card = random.choice(deck)
            dealer_cards.append(dealer_card)
            deck.remove(dealer_card)
            dealer_score += dealer_card.get('cost')

        # if both cards are Ace for player
        if player_cards[0].get('cost') == 11 and player_cards[1].get('cost') == 11:
            player_cards[0]['cost'] = 1
            player_score -= 10

        # if both cards are Ace for dealer
        if dealer_cards[0].get('cost') == 11 and dealer_cards[1].get('cost') == 11:
            dealer_cards[0]['cost'] = 1
            dealer_score -= 10

        db.update(table='user', set='player_score = ?, deck = ?, player_cards = ?, dealer_cards = ?, dealer_score = ?', where='user_id = ?', values=(player_score, str(deck), str(player_cards), str(dealer_cards), dealer_score, message.from_user.id,))

        img = Game_controls()
        img.render_cards([dealer_cards[0]['image'], 'static/images/back.png'], 2, f"{message.from_user.id}_out_dealer_close.webp")
        img.render_cards([player_cards[0]['image'], player_cards[1]['image']], 2, f"{message.from_user.id}_out_player.webp")
        
        # print            
        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_close.webp", 'rb').read())
        await bot.send_message(message.chat.id, "‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+": </b>"+_("–°–∫—Ä—ã—Ç–æ"))

        # print
        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
        user = db.load_user(message.from_user.id)
        await bot.send_message(message.chat.id, "‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}", reply_markup=game_controls_markup)

        # Player gets a blackjack  
        if (player_score == 21):
            # keyboard
            kbd = Keyboard(user['lang'])
            main_menu_markup = kbd.new_game()
            
            current_win = float(pet)*float(1.5)
            total_win = current_win+float(user['balance'])
            db.update(table='user', set='player_score = ?, is_game = ?, balance = ?', where='user_id = ?', values=(user['player_score'], False, total_win, message.from_user.id, ))
            game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_won=True)
            await message.answer(_("–£ –≤–∞—Å –ë–ª—ç–∫-–î–∂–µ–∫! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")+" ü•É\n<b>"+_("–ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à")+f"</b>: {current_win} üí¥", reply_markup=main_menu_markup)

    # if player decides to go on
    if (message.text == _("–ï—â–µ üü¢")):
        user         = db.load_user(message.from_user.id)
        dealer_cards = list(eval(user['dealer_cards']))
        player_cards = list(eval(user['player_cards']))
        deck         = list(eval(user['deck']))

        if (user['is_game'] == False):
            await message.answer(_("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"))
            return;

        # randomly dealing a card for player
        player_card = random.choice(deck)
        player_cards.append(player_card)
        deck.remove(player_card)
        user['player_score'] += player_card.get('cost')

        db.update(table='user', set='player_score = ?, deck = ?, player_cards = ?', where='user_id = ?', values=(str(user['player_score']), str(deck), str(player_cards), message.from_user.id, ))

        # generate image
        img_path = []
        for i in range(len(player_cards)):
            img_path.append(player_cards[i]['image'])
        
        img = Game_controls()
        img.render_cards(img_path, len(player_cards), f"{message.from_user.id}_out_player.webp")
        img.render_cards([dealer_cards[0]['image'], 'static/images/back.png'], 2, f"{message.from_user.id}_out_dealer_close.webp")
        img.render_cards([dealer_cards[0]['image'], dealer_cards[1]['image']], 2, f"{message.from_user.id}_out_dealer_open.webp")

        # keyboard
        kbd = Keyboard(user['lang'])
        continue_game_controls_markup = kbd.game_nav_2()   

        # if player wons
        if (user['player_score'] == 21):
            current_win = float(user['pet'])*float(1.5)
            total_win = current_win+user['balance'] # update win

            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
            user = db.load_user(message.from_user.id)
            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")

            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
            user = db.load_user(message.from_user.id)

                # keyboard
            kbd = Keyboard(user['lang'])
            main_menu_markup = kbd.new_game()

            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")+f" ü•É\n<b>"+_("–ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à")+f"</b>: {current_win} üí¥", reply_markup=main_menu_markup)
            db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
            game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_won=True)
            
            return;

        # if player picks too many cards
        if (user['player_score'] > 21):
            # updating scrore if player has Ace in them
            for i in player_cards:
                if (i.get('value') == "–¢—É–∑" and i.get('cost') == 11):
                    user['player_score']-=10
                    i['cost'] = 1
                    db.update(table='user', set='player_score = ?, player_cards = ?', where='user_id = ?', values=(user['player_score'], str(player_cards), message.from_user.id, ))

            # if player loses
            if (user['player_score'] > 21):
                total_win = user['balance']-float(user['pet']) # update loss

                await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
                user = db.load_user(message.from_user.id)
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")

                await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
                user = db.load_user(message.from_user.id)
                
                # keyboard
                kbd = Keyboard(user['lang'])
                main_menu_markup = kbd.new_game()
                
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏")+" ‚ùå\n"+_("–ü—Ä–æ–∏–≥—Ä—ã—à")+f": -{float(user['pet'])}", reply_markup=main_menu_markup)
                db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
                game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_lost=True)

                return;

        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_close.webp", 'rb').read())
        user = db.load_user(message.from_user.id)
        await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> "+_("–°–∫—Ä—ã—Ç–æ"))

        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
        user = db.load_user(message.from_user.id)
        await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}", reply_markup=continue_game_controls_markup)

    # if player decides to stand
    if (message.text == _("–°—Ç–æ–ø üõë")):
        user         = db.load_user(message.from_user.id)
        dealer_cards = list(eval(user['dealer_cards']))
        player_cards = list(eval(user['player_cards']))
        deck         = list(eval(user['deck']))
        img_path_dealer = []
        img_path        = []

        if (user['is_game'] == False):
            await message.answer(_("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"))
            return;

        # generate image for player
        for i in range(len(player_cards)):
            img_path.append(player_cards[i]['image'])
        
        img = Game_controls()
        img.render_cards(img_path, len(player_cards), f"{message.from_user.id}_out_player.webp")
        
        # managing dealer moves
        while (user['dealer_score'] < 17):
            # randomly dealing a card for dealer
            dealer_card = random.choice(deck)
            dealer_cards.append(dealer_card)
            deck.remove(dealer_card)
            user['dealer_score'] += dealer_card.get('cost')

            db.update(table='user', set='dealer_score = ?, deck = ?, dealer_cards = ?', where='user_id = ?', values=(str(user['dealer_score']), str(deck), str(dealer_cards), message.from_user.id, ))
            
            user = db.load_user(message.from_user.id)
            dealer_cards = list(eval(user['dealer_cards']))
            deck         = list(eval(user['deck']))
            
            img_path_dealer = []
            for i in range(len(dealer_cards)):
                img_path_dealer.append(dealer_cards[i]['image'])

            img = Game_controls()
            img.render_cards(img_path_dealer, len(dealer_cards), f"{message.from_user.id}_out_dealer_open.webp")

            # if dealer picks too many cards
            if (user['dealer_score'] > 21):
                # updating scrore if player has Ace in them
                for i in dealer_cards:
                    if (i.get('value') == "–¢—É–∑" and i.get('cost') == 11):
                        user['dealer_score']-=10
                        i['cost'] = 1
                        db.update(table='user', set='dealer_score = ?, dealer_cards = ?', where='user_id = ?', values=(user['dealer_score'], str(dealer_cards), message.from_user.id, ))
                
                # if dealer loses, player win
                if (user['dealer_score'] > 21):
                    current_win = float(user['pet'])
                    total_win = current_win+user['balance'] # update player win

                    await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
                    
                    user = db.load_user(message.from_user.id)
                    await message.answer(f"‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")
                    
                    await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
                    user = db.load_user(message.from_user.id)

                    # keyboard
                    kbd = Keyboard(user['lang'])
                    main_menu_markup = kbd.new_game()
                    await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")+f" ü•É\n<b>"+_("–ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à")+f"</b>: {current_win} üí¥", reply_markup=main_menu_markup)

                    db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
                    game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_won=True)

                    return
                break
            
        user = db.load_user(message.from_user.id)            
        dealer_cards = list(eval(user['dealer_cards']))

        for i in range(len(dealer_cards)):
            img_path_dealer.append(dealer_cards[i]['image'])

        img = Game_controls()
        img.render_cards(img_path_dealer, len(dealer_cards), f"{message.from_user.id}_out_dealer_open.webp")
        
        # if dealer loses, player win
        if (user['dealer_score'] < user['player_score']):
            current_win = float(user['pet'])
            total_win = current_win+user['balance'] # update player win
            
            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
            user = db.load_user(message.from_user.id)
            await message.answer(f"‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")
            
            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
            user = db.load_user(message.from_user.id)

            # keyboard
            kbd = Keyboard(user['lang'])
            main_menu_markup = kbd.new_game()

            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–í—ã –ø–æ–±–µ–¥–∏–ª–∏")+f"! ü•É\n<b>"+_("–ß–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à")+f"</b>: {current_win} üí¥", reply_markup=main_menu_markup)

            db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
            game_controls.collect_statistics(user_id=message.from_user.id, is_played=True, is_won=True)


        # if player loses, dealer win
        if (user['dealer_score'] > user['player_score']):
            total_win = user['balance']-float(user['pet']) # update loss

            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
            user = db.load_user(message.from_user.id)
            await message.answer(f"‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")
            
            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
            user = db.load_user(message.from_user.id)

                # keyboard
            kbd = Keyboard(user['lang'])
            main_menu_markup = kbd.new_game()

            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏")+f" ‚ùå\n"+_("–ü—Ä–æ–∏–≥—Ä—ã—à")+f": -{float(user['pet'])}", reply_markup=main_menu_markup)

            db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
            game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_lost=True)
    
        # if draw
        if (user['dealer_score'] == user['player_score']):
            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
            
            user = db.load_user(message.from_user.id)
            await message.answer(f"‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")
            
            await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
            user = db.load_user(message.from_user.id)

                # keyboard
            kbd = Keyboard(user['lang'])
            main_menu_markup = kbd.new_game()

            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–ù–∏—á—å—è"), reply_markup=main_menu_markup)

            db.update(table='user', set='is_game = ?', where='user_id = ?', values=(False, message.from_user.id,))
            game_controls.collect_statistics(user_id=message.from_user.id, is_played=True,is_tied=True)

    # if player gives up
    if (message.text == _("–°–¥–∞—é—Å—å üòµ")):
        user         = db.load_user(message.from_user.id)
        dealer_cards = list(eval(user['dealer_cards']))
        player_cards = list(eval(user['player_cards']))
        deck         = list(eval(user['deck']))

        if (user['is_game'] == False):
            await message.answer(_("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"))
            return;

        total_win = user['balance']-float(user['pet']) # update loss
        
        img = Game_controls()
        img.render_cards([dealer_cards[0]['image'], dealer_cards[1]['image']], 2, f"{message.from_user.id}_out_dealer_open.webp")
        
        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_dealer_open.webp", 'rb').read())
        user = db.load_user(message.from_user.id)
        await message.answer(f"‚¨ÜÔ∏è üëΩ <b>"+_("–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞")+f": </b> {user['dealer_score']}")
        
        await bot.send_sticker(message.chat.id, sticker=open(f"static/images/{message.from_user.id}_out_player.webp", 'rb').read())
        user = db.load_user(message.from_user.id)

        # keyboard
        kbd = Keyboard(user['lang'])
        main_menu_markup = kbd.new_game()

        await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>"+_("–í–∞—à–∏ –∫–∞—Ä—Ç—ã")+f": </b> {user['player_score']}\n"+_("–í—ã —Å–¥–∞–ª–∏—Å—å")+f" :(\n"+_("–ü—Ä–æ–∏–≥—Ä—ã—à")+f": -{float(user['pet'])}", reply_markup=main_menu_markup)

        db.update(table='user', set='balance = ?, is_game = ?', where='user_id = ?', values=(total_win, False, message.from_user.id, ))
        game_controls.collect_statistics(user_id=message.from_user.id, is_played=True, is_lost=True)

    # view balance
    if (message.text == _("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å üí∞")):
        user = db.load_user(message.from_user.id)
        await message.answer(_("üí∞ –ë–∞–ª–∞–Ω—Å: ")+ str(user['balance']))