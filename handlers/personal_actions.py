import json
import random

from aiogram import types
from dispatcher import dp
from dispatcher import bot
from bot import db

from functions import render_image

# main variables
pet          = 0 # —Å—Ç–∞–≤–∫–∞
player_score = 0
dealer_score = 0
player_cards = []
dealer_cards = []
deck         = []
heading_msg  = ""

# keyboard
new_game_btn = types.KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞")
new_game_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(new_game_btn)

# get help
@dp.message_handler(commands=['help'])
async def info_help(message: types.Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @kallmeroma")

@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
    await message.answer("""‚ô¶Ô∏è <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ë–ª—ç–∫-–î–∂–µ–∫ (–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–Ω–æ)</b> ‚ô¶Ô∏è\n
–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–≥—Ä–∞–ª –≤ –±–ª—ç–∫–¥–∂–µ–∫.\n
–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞ ‚Äî 21.\n–ó–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç, —Ä–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫—É, —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è, –∏ –µ—Å–ª–∏ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 21, –∏–≥—Ä–æ–∫ –≤—ã–ª–µ—Ç–∞–µ—Ç –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.\n
–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ 21, –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —É –¥–∏–ª–µ—Ä–∞.\n–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ —Å—É–º–º–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–∞.\n
–°—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã:.\n
- –í–∞–ª–µ—Ç - 2 –æ—á–∫–∞;\n- –î–∞–º–∞ - 3 –æ—á–∫–∞;\n- –ö–æ—Ä–æ–ª—å - 4 –æ—á–∫–∞;\n- –¢—É–∑ - 11 –æ—á–∫–æ–≤ (–µ—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 21, –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å 1 –æ—á–∫–æ);\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–º.""")

# start command
@dp.message_handler(commands=['start'])
async def process_start_game(message: types.Message):
    '''bot start'''
    
    global user
    user = db.load_user(message.from_user.id)
    if (not user):
        # register user
        db.add_user(int(message.from_user.id))

    if user[0][2] < 1:
        user = list(user[0])
        user[2] = 100
        user = tuple([user])
        db.update_user(message.from_user.id, 100)
    
    # keyboard
    game_type_markup_computer = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º ü§ñ")
    game_type_markup_online = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–æ–º üë®‚Äçü¶∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    game_type_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(game_type_markup_computer, game_type_markup_online)
    
    await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEEtKFie91Ts3FZ99cztCfWqfxAqNn4FgACaQIAArrAlQUw5zOp4KLsaCQE")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã", reply_markup=game_type_markup)

# main game logic
@dp.message_handler(content_types=["text"])
async def process_handler(message: types.Message):
    '''button handlers'''
    if message.chat.type == "private":
        if message.text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
            global user
            user = db.load_user(message.from_user.id)

            if user[0][2] < 1:
                user = list(user[0])
                user[2] = 100
                user = tuple([user])
                db.update_user(message.from_user.id, 100)

            # keyboard
            game_type_markup_computer = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º ü§ñ")
            game_type_markup_online = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–æ–º üë®‚Äçü¶∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            game_type_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(game_type_markup_computer, game_type_markup_online)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã", reply_markup=game_type_markup)

        if message.text == "–ò–≥—Ä–∞—Ç—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º ü§ñ":
            # keyboard
            balance_btn = types.KeyboardButton("–ë–∞–ª–∞–Ω—Å: "+ str(user[0][2]))
            pet_1_btn   = types.KeyboardButton("1 üí≤")
            pet_10_btn  = types.KeyboardButton("10 üí≤")
            pet_25_btn  = types.KeyboardButton("25 üí≤")
            pet_50_btn  = types.KeyboardButton("50 üí≤")
            pet_100_btn = types.KeyboardButton("100 üí≤")

            sample_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                pet_1_btn,
                pet_10_btn,
                pet_25_btn,
                pet_50_btn,
                pet_100_btn,
                balance_btn
            )
            await message.answer("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É", reply_markup=sample_markup)

        if ("üí≤" in message.text):
            '''Start game'''
            global dealer_score, player_score, player_cards, dealer_cards, deck, pet, heading_msg
            # reset all our local variables
            deck         = []
            dealer_cards = []
            player_cards = []
            player_score = 0
            dealer_score = 0

            # keyboard
            more_btn = types.KeyboardButton("–ï—â–µ")
            stop_btn = types.KeyboardButton("–°—Ç–æ–ø")
            give_up_btn = types.KeyboardButton("–°–¥–∞—é—Å—å")
            game_controls_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                more_btn, stop_btn, give_up_btn
            )

            # loading deck of cards
            with open('static/deck_of_cards.json','r', encoding="utf-8") as input_f:
                deck = json.load(input_f)
            input_f.close()

            pet = message.text.split()[0] # get pet
            await message.answer(f"–°—Ç–∞–≤–∫–∞ –≤ {message.text} –ø—Ä–∏–Ω—è—Ç–∞.ü§ë –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!")

            heading_msg = f"<b>–°—Ç–∞–≤–∫–∞</b>: {pet}| <b>–ë–∞–ª–∞–Ω—Å: </b>{user[0][2]}\n"
            
            # Initial dealing. Two cards for both
            for i in range(2):
                # for player
                player_card = random.choice(deck)
                player_cards.append(player_card)
                deck.remove(player_card)
                player_score += player_card.get('cost')

                # for dealer
                dealer_card = random.choice(deck)
                dealer_cards.append(dealer_card)
                deck.remove(dealer_card)
                dealer_score += dealer_card.get('cost')

            # if both of cards are Ace for player
            if player_cards[0].get('cost') == 11 and player_cards[1].get('cost') == 11:
                player_cards[0]['cost'] = 1
                player_score -= 10

            # if both of cards are Ace for dealer
            if dealer_cards[0].get('cost') == 11 and dealer_cards[1].get('cost') == 11:
                dealer_cards[0]['cost'] = 1
                dealer_score -= 10

            render_image([dealer_cards[0]['image'], 'static/images/back.png'], 2, "out_dealer_close.webp")
            await message.answer(heading_msg, reply_markup=game_controls_markup)
            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_close.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_cards[0]['cost']}")
            
            render_image([player_cards[0]['image'], player_cards[1]['image']], 2, "out_dealer_close.webp")
            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_close.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}")

            # Player gets a blackjack  
            if (player_score == 21):
                global new_game_markup
                total_win = float(pet)*float(1.5)+user[0][2]
                db.update_user(message.from_user.id, total_win)
                await message.answer(f"–£ –≤–∞—Å –ë–ª—ç–∫-–î–∂–µ–∫! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü•É", reply_markup=new_game_markup)

        # if player decides to go on
        if (message.text == "–ï—â–µ"):
            # randomly dealing a card for player
            player_card = random.choice(deck)
            player_cards.append(player_card)
            deck.remove(player_card)
            player_score += player_card.get('cost')

            # generate image
            img_path = []
            for i in range(len(player_cards)):
                img_path.append(player_cards[i]['image'])
            
            render_image(img_path, len(player_cards), "out_player.webp")
            render_image([dealer_cards[0]['image'], 'static/images/back.png'], 2, "out_dealer_close.webp")
            render_image([dealer_cards[0]['image'], dealer_cards[1]['image']], 2, "out_dealer_open.webp")

            # keyboard
            more_btn = types.KeyboardButton("–ï—â–µ")
            stop_btn = types.KeyboardButton("–°—Ç–æ–ø")
            continue_game_controls_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(more_btn, stop_btn)
            
            await message.answer(heading_msg, reply_markup=continue_game_controls_markup)

            # if player wons
            if (player_score == 21):
                total_win = float(pet)+user[0][2] # update win
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü•É", reply_markup=new_game_markup)

                db.update_user(message.from_user.id, total_win)
                return;

            # if player picks too many cards
            if (player_score > 21):
                # updating scrore if player has Ace in them
                for i in player_cards:
                    if (i.get('value') == "–¢—É–∑" and i.get('cost') == 11):
                        player_score-=10
                        i['cost'] = 1

                # if player loses
                if (player_score > 21):
                    total_win = user[0][2]-float(pet) # update loss
                    
                    await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                    await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                    
                    await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                    await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", reply_markup=new_game_markup)

                    db.update_user(message.from_user.id, total_win)
                    return;

            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_close.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_cards[0]['cost']}")

            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}")

        # if player decides to stand
        if (message.text == "–°—Ç–æ–ø"):
            
            img_path_dealer = []
            
            # managing dealer moves
            while (dealer_score < 17):
                # randomly dealing a card for dealer
                dealer_card = random.choice(deck)
                dealer_cards.append(dealer_card)
                deck.remove(dealer_card)
                dealer_score += dealer_card.get('cost')
                
                for i in range(len(dealer_cards)):
                    img_path_dealer.append(dealer_cards[i]['image'])
                render_image(img_path_dealer, len(dealer_cards), "out_dealer_open.webp")

                # if dealer picks too many cards
                if (dealer_score > 21):
                    # updating scrore if player has Ace in themif (player_score > 21):
                    for i in dealer_cards:
                        if (i.get('value') == "–¢—É–∑" and i.get('cost') == 11):
                            dealer_score-=10
                            i['cost'] = 1
                    
                    # if dealer loses, player win
                    if (dealer_score > 21):
                        total_win = float(pet)+user[0][2] # update player win

                        await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                        await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                        
                        await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                        await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü•É", reply_markup=new_game_markup)

                        db.update_user(message.from_user.id, total_win)
                        return
                    break
                
            # if dealer loses, player win
            if (dealer_score < player_score):
                total_win = float(pet)+user[0][2] # update player win
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏! ü•É", reply_markup=new_game_markup)

                db.update_user(message.from_user.id, total_win)

            # if player loses, dealer win
            if (dealer_score > player_score):
                total_win = user[0][2]-float(pet) # update loss
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", reply_markup=new_game_markup)

                db.update_user(message.from_user.id, total_win)

            # if draw
            if (dealer_score == player_score):
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
                
                await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
                await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–ù–∏—á—å—è", reply_markup=new_game_markup)

        # if player gives up
        if (message.text == "–°–¥–∞—é—Å—å"):
            total_win = user[0][2]-float(pet) # update loss

            render_image([dealer_cards[0]['image'], dealer_cards[1]['image']], 2, "out_dealer_open.webp")
            
            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_dealer_open.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üëΩ <b>–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: </b> {dealer_score}")
            
            await bot.send_sticker(message.chat.id, sticker=open("static/images/out_player.webp", 'rb').read())
            await message.answer(f"‚¨ÜÔ∏è üë®‚Äçüíº <b>–í–∞—à–∏ –∫–∞—Ä—Ç—ã: </b> {player_score}\n–í—ã —Å–¥–∞–ª–∏—Å—å :(", reply_markup=new_game_markup)

            db.update_user(message.from_user.id, total_win)